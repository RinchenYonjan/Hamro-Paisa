@page "/dept"
@inject IDialogService DialogService
@inject IPaisaService PaisaService

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My MAUI App</title>
    <link rel="stylesheet" href="style.css">

    <style>
        table {
            font-family: arial, sans-serif;
            border-collapse: collapse;
            width: 100%;
            table-layout: fixed;
        }

        td, th {
            border: 1px solid #000000;
            text-align: left;
            padding: 8px;
            word-wrap: break-word;
        }

    </style>

</head>

<body>

    <div class="user-section">

        <div class="search-bar">
            <form action="/search" method="get">
                <input type="search" name="query" placeholder="Search here..." @bind="search_item" required>
                <MudButton @onclick="Search" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ManageSearch" Color="Color.Primary">Search</MudButton>
            </form>
        </div>

        <!-- Top Button containers -->
        <div class="button-container">
            <MudButton @onclick="SortDialog" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.FilterAlt" Color="Color.Primary">Sort</MudButton>
            <MudButton @onclick="HighestOrder" Style="width: 120px;" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ArrowUpward" Color="Color.Primary">Highest</MudButton>
            <MudButton @onclick="LowestOrder" Style="width: 120px;" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ArrowDownward" Color="Color.Primary">Lowest</MudButton>
        </div>

    </div>

    <!-- List container -->
    <div class="unique-container">
        <div class="unqiue-list">
            <h3>Depts History</h3>

                @foreach (var item in paisamodel)
                {
                    <table class="transaction-item">
                        <tr>
                            <th>Title</th>
                            <th>Date</th>
                            <th>Amount</th>
                        </tr>
                        <tr>
                            <td>@item.Description</td>
                            <td>@item.Date.ToString("yyyy-MM-dd")</td>
                            <td><a>Rs</a> @item.Amount.ToString()</td>
                        </tr>
                    </table>
                }

        </div>
    </div>

</body>
</html>


@code {

    // Declaring list
    IEnumerable<PaisaModel> paisamodel;

    bool sort = false;

    // Getter and Setter for search box
    private string search_item { get; set; }

    // Getter and Setter for Date Range
    private string selectedDateRange { get; set; }


    // Initialization Method
    protected sealed override void OnInitialized()
    {
        LoadDeptItems();
    }


    // Method to load dept type
    private void LoadDeptItems()
    {
        paisamodel = PaisaService.GetAllPaisa().Where(x => x.Type == "Dept");
    }


    // Search Button event
    private void Search()
    {
        if (!string.IsNullOrEmpty(search_item))
        {
            paisamodel = PaisaService.GetAllPaisa()
                .Where(x => x.Type == "Dept" && x.Description.ToLower().Contains(search_item.ToLower()));
        }
        else
        {
            DialogService.ShowMessageBox(
              title: "Empty Field!",
              message: "Please insert value for the result.",
              options: new MudBlazor.DialogOptions()
                  {
                      CloseButton = false,       // Hide close button
                      FullWidth = true,          // Make dialog full width
                      MaxWidth = MudBlazor.MaxWidth.Small // Control dialog width
                  });
        }
    }


    // Method to open dialog for dept
    private async Task SortDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<DeptSort>("Filter by Date Range", options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is DateModel dateModel)
        {
            selectedDateRange = $"{dateModel.DateFrom} to {dateModel.DateTo}";
            FilterDeptByDateRange(dateModel);
        }
    }


    // Method to filter dept by date range
    private void FilterDeptByDateRange(DateModel dateModel)
    {
        DateTime dateFrom = DateTime.Parse(dateModel.DateFrom);
        DateTime dateTo = DateTime.Parse(dateModel.DateTo);

        paisamodel = PaisaService.GetAllPaisa()
            .Where(x => x.Type == "Dept" && x.Date >= dateFrom && x.Date <= dateTo)
            .OrderBy(x => x.Date)
            .ToList();
    }


    // HighestOrder button event
    private void HighestOrder()
    {
        paisamodel = PaisaService.GetAllPaisa()
            .Where(x => x.Type == "Dept")
            .OrderByDescending(x => x.Amount);
    }


    // LowestOrder button event
    private void LowestOrder()
    {
        paisamodel = PaisaService.GetAllPaisa()
           .Where(x => x.Type == "Dept")
           .OrderBy(x => x.Amount);
    }

}
