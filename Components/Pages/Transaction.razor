@page "/transaction"
@inject IDialogService DialogService
@inject IPaisaService PaisaService

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My MAUI App</title>
    <link rel="stylesheet" href="style.css">

    <style>
        table {
        font-family: arial, sans-serif;
        border-collapse: collapse;
        width: 100%;
        table-layout: fixed;
        }

        td, th {
        border: 1px solid #000000;
        text-align: left;
        padding: 8px;
        word-wrap: break-word;
        }

    </style>

</head>

<body>

    <div class="user-section">

        <div class="search-bar">
            <form action="/search" method="get">
                <input type="search" name="query" placeholder="Search here..." @bind="search_item" required>
                <MudButton Class="SearchButton" @onclick="Search" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ManageSearch" Color ="Color.Primary">Search</MudButton>
            </form>
        </div>

        <!-- Top Button containers -->
        <div class="button-container">
            <MudButton @onclick="OpenTransactionDialog" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.PlaylistAdd" Color="Color.Primary">Add</MudButton>
            <MudButton @onclick="SortDialog" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.FilterAlt" Color="Color.Primary">Sort</MudButton>
            <MudButton @onclick="HighestOrder" Style="width: 120px;" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ArrowUpward" Color="Color.Primary">Highest</MudButton>
            <MudButton @onclick="LowestOrder" Style="width: 120px;" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ArrowDownward" Color="Color.Primary">Lowest</MudButton>
        </div>

    </div>

    <!-- List container -->
    <div class="unique-container">
        <div class="unqiue-list">
            <h3>Transaction History</h3>

            @foreach (var transaction in paisamodel)
            {

                <table class="transaction-item">
                    <tr>
                        <th>Title</th>
                        <th>Date</th>
                        <th>Amount</th>
                        <th>Type</th>
                    </tr>
                    <tr>
                        <td>@transaction.Description</td>
                        <td>@transaction.Date.ToString("yyyy-MM-dd")</td>
                        <td><a>Rs</a> @transaction.Amount.ToString()</td>
                        <td class="@(transaction.Type == "Income" ? "text-success" : "text-danger")">@transaction.Type</td>
                    </tr>
                </table>

            }

        </div>
    </div>

</body>
</html>


@code {

    // Declaring list
    IEnumerable<PaisaModel> paisamodel;

    bool sort = false;

    // Getter and Setter for Search Item
    private string search_item { get; set; }

    // Getter and Setter for Date Range
    private string selectedDateRange { get; set; }


    // Method for initialize
    protected sealed override void OnInitialized()
    {

        paisamodel = PaisaService.GetAllPaisa();

    }


    // Search Button event
    private void Search()
    {

        if(search_item != null)
        {
            paisamodel = PaisaService.GetAllPaisa().Where(x => (x.Description.ToLower().Contains(search_item.ToLower())));
        }
        else
        {
            DialogService.ShowMessageBox(
              title: "Empty Filed!",
              message: "Please insert value for the result.",
              options: new MudBlazor.DialogOptions()
                  {
                      CloseButton = false,       // Hide close button
                      FullWidth = true,          // Make dialog full width
                      MaxWidth = MudBlazor.MaxWidth.Small // Control dialog width
                  });
        }

    }


    // Add button event
    private async Task OpenTransactionDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<TransactionDialog>("Transaction Dialog", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            paisamodel = PaisaService.GetAllPaisa();
        }
    }


    // Sort button event
    private async Task SortDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<TransactionSort>("Sort Transactions", options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is DateModel dateModel)
        {
            selectedDateRange = $"{dateModel.DateFrom} to {dateModel.DateTo}";
            FilterTransactionByDateRange(dateModel);
        }
       
    }


    // Method to filter transactions by date range
    private void FilterTransactionByDateRange(DateModel dateModel)
    {
        DateTime dateFrom = DateTime.Parse(dateModel.DateFrom);
        DateTime dateTo = DateTime.Parse(dateModel.DateTo);

        paisamodel = PaisaService.GetAllPaisa()
            .Where(x => x.Date >= dateFrom && x.Date <= dateTo)
            .OrderBy(x => x.Date)
            .ToList();
    }


    // HighestOrder button event
    private void HighestOrder()
    {

        paisamodel = PaisaService.GetAllPaisa().OrderByDescending(x => x.Amount);

    }


    // LowestOrder button event
    private void LowestOrder()
    {

        paisamodel = PaisaService.GetAllPaisa().OrderBy(x => x.Amount);

    }


}
